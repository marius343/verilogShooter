--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=11 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_decode 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_oma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[10..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[10..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode589w[1..0]	: WIRE;
	w_anode598w[3..0]	: WIRE;
	w_anode615w[3..0]	: WIRE;
	w_anode625w[3..0]	: WIRE;
	w_anode635w[3..0]	: WIRE;
	w_anode645w[3..0]	: WIRE;
	w_anode655w[3..0]	: WIRE;
	w_anode665w[3..0]	: WIRE;
	w_anode675w[3..0]	: WIRE;
	w_anode687w[1..0]	: WIRE;
	w_anode694w[3..0]	: WIRE;
	w_anode705w[3..0]	: WIRE;
	w_anode715w[3..0]	: WIRE;
	w_anode725w[3..0]	: WIRE;
	w_anode735w[3..0]	: WIRE;
	w_anode745w[3..0]	: WIRE;
	w_anode755w[3..0]	: WIRE;
	w_anode765w[3..0]	: WIRE;
	w_data587w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[10..0] = eq_wire[10..0];
	eq_wire[] = ( ( w_anode765w[3..3], w_anode755w[3..3], w_anode745w[3..3], w_anode735w[3..3], w_anode725w[3..3], w_anode715w[3..3], w_anode705w[3..3], w_anode694w[3..3]), ( w_anode675w[3..3], w_anode665w[3..3], w_anode655w[3..3], w_anode645w[3..3], w_anode635w[3..3], w_anode625w[3..3], w_anode615w[3..3], w_anode598w[3..3]));
	w_anode589w[] = ( (w_anode589w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode598w[] = ( (w_anode598w[2..2] & (! w_data587w[2..2])), (w_anode598w[1..1] & (! w_data587w[1..1])), (w_anode598w[0..0] & (! w_data587w[0..0])), w_anode589w[1..1]);
	w_anode615w[] = ( (w_anode615w[2..2] & (! w_data587w[2..2])), (w_anode615w[1..1] & (! w_data587w[1..1])), (w_anode615w[0..0] & w_data587w[0..0]), w_anode589w[1..1]);
	w_anode625w[] = ( (w_anode625w[2..2] & (! w_data587w[2..2])), (w_anode625w[1..1] & w_data587w[1..1]), (w_anode625w[0..0] & (! w_data587w[0..0])), w_anode589w[1..1]);
	w_anode635w[] = ( (w_anode635w[2..2] & (! w_data587w[2..2])), (w_anode635w[1..1] & w_data587w[1..1]), (w_anode635w[0..0] & w_data587w[0..0]), w_anode589w[1..1]);
	w_anode645w[] = ( (w_anode645w[2..2] & w_data587w[2..2]), (w_anode645w[1..1] & (! w_data587w[1..1])), (w_anode645w[0..0] & (! w_data587w[0..0])), w_anode589w[1..1]);
	w_anode655w[] = ( (w_anode655w[2..2] & w_data587w[2..2]), (w_anode655w[1..1] & (! w_data587w[1..1])), (w_anode655w[0..0] & w_data587w[0..0]), w_anode589w[1..1]);
	w_anode665w[] = ( (w_anode665w[2..2] & w_data587w[2..2]), (w_anode665w[1..1] & w_data587w[1..1]), (w_anode665w[0..0] & (! w_data587w[0..0])), w_anode589w[1..1]);
	w_anode675w[] = ( (w_anode675w[2..2] & w_data587w[2..2]), (w_anode675w[1..1] & w_data587w[1..1]), (w_anode675w[0..0] & w_data587w[0..0]), w_anode589w[1..1]);
	w_anode687w[] = ( (w_anode687w[0..0] & data_wire[3..3]), enable_wire);
	w_anode694w[] = ( (w_anode694w[2..2] & (! w_data587w[2..2])), (w_anode694w[1..1] & (! w_data587w[1..1])), (w_anode694w[0..0] & (! w_data587w[0..0])), w_anode687w[1..1]);
	w_anode705w[] = ( (w_anode705w[2..2] & (! w_data587w[2..2])), (w_anode705w[1..1] & (! w_data587w[1..1])), (w_anode705w[0..0] & w_data587w[0..0]), w_anode687w[1..1]);
	w_anode715w[] = ( (w_anode715w[2..2] & (! w_data587w[2..2])), (w_anode715w[1..1] & w_data587w[1..1]), (w_anode715w[0..0] & (! w_data587w[0..0])), w_anode687w[1..1]);
	w_anode725w[] = ( (w_anode725w[2..2] & (! w_data587w[2..2])), (w_anode725w[1..1] & w_data587w[1..1]), (w_anode725w[0..0] & w_data587w[0..0]), w_anode687w[1..1]);
	w_anode735w[] = ( (w_anode735w[2..2] & w_data587w[2..2]), (w_anode735w[1..1] & (! w_data587w[1..1])), (w_anode735w[0..0] & (! w_data587w[0..0])), w_anode687w[1..1]);
	w_anode745w[] = ( (w_anode745w[2..2] & w_data587w[2..2]), (w_anode745w[1..1] & (! w_data587w[1..1])), (w_anode745w[0..0] & w_data587w[0..0]), w_anode687w[1..1]);
	w_anode755w[] = ( (w_anode755w[2..2] & w_data587w[2..2]), (w_anode755w[1..1] & w_data587w[1..1]), (w_anode755w[0..0] & (! w_data587w[0..0])), w_anode687w[1..1]);
	w_anode765w[] = ( (w_anode765w[2..2] & w_data587w[2..2]), (w_anode765w[1..1] & w_data587w[1..1]), (w_anode765w[0..0] & w_data587w[0..0]), w_anode687w[1..1]);
	w_data587w[2..0] = data_wire[2..0];
END;
--VALID FILE
